// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: product.sql

package db

import (
	"context"
	"time"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  name,
  size,
  weight,
  price,
  user_id,
  category_id
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, name, size, weight, price, category_id, created_at, updated_at, user_id
`

type CreateProductParams struct {
	Name       string `json:"name"`
	Size       string `json:"size"`
	Weight     int64  `json:"weight"`
	Price      int64  `json:"price"`
	UserID     int64  `json:"user_id"`
	CategoryID int64  `json:"category_id"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Size,
		arg.Weight,
		arg.Price,
		arg.UserID,
		arg.CategoryID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Size,
		&i.Weight,
		&i.Price,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1 AND user_id = $2
`

type DeleteProductParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) DeleteProduct(ctx context.Context, arg DeleteProductParams) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, arg.ID, arg.UserID)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, size, weight, price, category_id, created_at, updated_at, user_id FROM products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Size,
		&i.Weight,
		&i.Price,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, size, weight, price, category_id, created_at, updated_at, user_id FROM products
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Size,
			&i.Weight,
			&i.Price,
			&i.CategoryID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsWithCategory = `-- name: ListProductsWithCategory :many
SELECT products.id, products.name, size, weight, price, category_id, products.created_at, products.updated_at, user_id, categories.id, categories.name, categories.created_at, categories.updated_at, description FROM products
JOIN categories ON products.category_id = categories.id
WHERE categories.name = $1
ORDER BY products.id
LIMIT $2
OFFSET $3
`

type ListProductsWithCategoryParams struct {
	Name   string `json:"name"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type ListProductsWithCategoryRow struct {
	ID          int64     `json:"id"`
	Name        string    `json:"name"`
	Size        string    `json:"size"`
	Weight      int64     `json:"weight"`
	Price       int64     `json:"price"`
	CategoryID  int64     `json:"category_id"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	UserID      int64     `json:"user_id"`
	ID_2        int64     `json:"id_2"`
	Name_2      string    `json:"name_2"`
	CreatedAt_2 time.Time `json:"created_at_2"`
	UpdatedAt_2 time.Time `json:"updated_at_2"`
	Description string    `json:"description"`
}

func (q *Queries) ListProductsWithCategory(ctx context.Context, arg ListProductsWithCategoryParams) ([]ListProductsWithCategoryRow, error) {
	rows, err := q.db.QueryContext(ctx, listProductsWithCategory, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProductsWithCategoryRow
	for rows.Next() {
		var i ListProductsWithCategoryRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Size,
			&i.Weight,
			&i.Price,
			&i.CategoryID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.ID_2,
			&i.Name_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
  set name = $2,
  size = $3,
  weight = $4,
  price = $5
WHERE id = $1
AND user_id = $6
RETURNING id, name, size, weight, price, category_id, created_at, updated_at, user_id
`

type UpdateProductParams struct {
	ID     int64  `json:"id"`
	Name   string `json:"name"`
	Size   string `json:"size"`
	Weight int64  `json:"weight"`
	Price  int64  `json:"price"`
	UserID int64  `json:"user_id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Size,
		arg.Weight,
		arg.Price,
		arg.UserID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Size,
		&i.Weight,
		&i.Price,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}
